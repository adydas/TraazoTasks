<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Comment extends BaseComment
{

	public function save( Doctrine_Connection $con = null)
	{

		if (!$con){
			$con = Doctrine_Manager::connection();
		}

		try {
			//does an id exist?
			$id = $this->getCommentId();

			//create an event log
			$evl = new EventLog();
			$evl->setUserId($this->getSubmittedBy());
			$evl->setAction($id?'UPDATE':'CREATE');
			$evl->setActionDetail(serialize(array(get_class($this), $this->getCommentText())));
			$evl->setCreated(date("Y-m-d H:i:s"));
			$evl->save($con);

			$con->beginTransaction();
			$ret = parent::save($con);

			$this->updateLuceneIndex();
			$con->commit();
			return $ret;

		}catch (Doctrine_Exception $e) {
			$con->rollback();
			error_log ($e->getMessage());
			return false;
		}

	}



	public function updateLuceneIndex()
	{

		$accountId = $this->getId();

		$index = TaskTable::getLuceneIndex($accountId);

		// remove an existing entry
		if ($hit = $index->find('pk:'.$this->getCommentId())){
			$index->delete($hit->id);
		}

		// don't index expired events
		//      if ($this->getEventDate() < today)
		//      {
		//          return;
		//      }

		$doc = new Zend_Search_Lucene_Document();

		// store primary key URL to identify it in the search results
		$doc->addField(Zend_Search_Lucene_Field::UnIndexed('pk', $this->getCommentId()));

		// index fields
		$doc->addField(Zend_Search_Lucene_Field::UnStored('commentText', $this->getCommentText(), 'utf-8'));

		// add job to the index
		$index->addDocument($doc);
		$index->commit();
	}


	// lib/model/JobeetJob.php
	public function delete(Doctrine_Connection $con = null)
	{

		if (!$con){
			$con = Doctrine_Manager::connection();
		}

		try {
				
			$index = TaskTable::getLuceneIndex();
			if ($hit = $index->find('pk:'.$this->getCommentId())){
				$index->delete($hit->id);
			}
				

			//create an event log
			$evl = new EventLog();
			$evl->setUserId($this->getSubmittedBy());
			$evl->setAction('DELETE');
			$evl->setActionDetail(serialize(array(get_class($this), $this->getName())));
			$evl->setCreated(date("Y-m-d H:i:s"));
			$evl->save($con);

			return parent::delete($con);

		}catch (Doctrine_Exception $e) {
			$con->rollback();
			error_log ($e->getMessage());
			return false;
		}
	}


}